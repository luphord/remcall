from . import schema
from .communication.util import RemcallError

class CSharphCodeGenerator:

    indent_chars = '\t'
    type_names = {
        schema.void: 'void',
        schema.boolean: 'bool',
        schema.int8: 'SByte',
        schema.uint8: 'byte',
        schema.int16: 'Int16',
        schema.uint16: 'UInt16',
        schema.int32: 'Int32',
        schema.uint32: 'UInt32',
        schema.int64: 'Int64',
        schema.uint64: 'UInt64',
        schema.float32: 'float',
        schema.float64: 'double',
        schema.string: 'string',
        schema.date: 'DateTime',
        schema.time: 'Time',
        schema.datetime: 'DateTime'
    }

    def __init__(self, schema, namespace='Remcall.Generated'):
        self.schema = schema
        self.namespace = namespace
        self._indent = 0
        self.outfile = None

    def writeline(self, s):
        print(self.indent_chars * self._indent + s, file=self.outfile)

    def linebreak(self):
        print(file=self.outfile)

    def indent(self):
        self._indent += 1

    def dedent(self):
        self._indent -= 1
        if self._indent < 0:
            raise RemcallError('Trying to create negative indent')

    def typename(self, typ):
        return self.type_names[typ] if typ in self.type_names else typ.name

    def write_schema(self, fp):
        self.outfile = fp
        self.writeline('// Code generated by remcall, do not edit!')
        self.writeline('using System;')
        self.linebreak()
        self.writeline('namespace {} {{'.format(self.namespace))
        self.linebreak()
        self.indent()
        for enum in self.schema.enums_sorted:
            self.write_enum(enum)
            self.linebreak()
        for record in self.schema.records_sorted:
            self.write_record(record)
            self.linebreak()
        for interface in self.schema.interfaces_sorted:
            self.write_interface(interface)
            self.linebreak()
        self.dedent()
        self.writeline('}')

    def write_enum(self, enum):
        self.writeline('enum {} {{ {} }}'.format(self.typename(enum), ', '.join(enum.values)))

    def write_record(self, record):
        raise NotImplementedError()

    def write_interface(self, interface):
        self.writeline('interface {} {{'.format(self.typename(interface)))
        self.indent()
        for method in interface.methods_sorted:
            self.write_method(method)
        self.dedent()
        self.writeline('}')

    def write_method(self, method):
        ret = self.typename(method.return_type)
        self.writeline('{} {}({});'.format(ret, method.name, ', '.join('{!s} {}'.format(self.typename(typ), name) for typ, name in method.arguments)))
